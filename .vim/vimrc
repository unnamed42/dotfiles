" {{{ vim-plug & python3 setup

set nocp
if !has('nvim')
  set pyxversion=3
endif

" directory which this script resides in
let s:this_path = fnamemodify(resolve(expand('<sfile>:p')), ':h')
" basedir of vim-plug
let s:config_dir = expand('~/.vim')
if s:this_path =~ '^/etc'
  if has('nvim')
    let s:config_dir = '/etc/xdg/nvim'
  else
    let s:config_dir = '/etc/vim'
  endif
endif

" download vim-plug if not installed
if empty(glob(s:config_dir.'/autoload/plug.vim'))
  silent execute '!curl' '-fLo' s:config_dir.'/autoload/plug.vim' '--create-dirs'
    \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  execute source s:config_dir.'/autoload/plug.vim'
  PlugInstall
endif

let g:python3_host_prog = '/usr/bin/python3'

call plug#begin(s:config_dir.'/plugged')

Plug 'arcticicestudio/nord-vim'

Plug 'Yggdroot/indentLine'
Plug 'luochen1990/rainbow'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-sleuth'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/vim-easy-align'

Plug 'udalov/kotlin-vim'
Plug 'yuezk/vim-js'
Plug 'uarun/vim-protobuf'
Plug 'chr4/nginx.vim'
Plug 'justinmk/vim-syntax-extra'

if !has('nvim')
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'ncm2/ncm2' | Plug 'roxma/nvim-yarp'
Plug 'ncm2/ncm2-path'
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-vim' | Plug 'Shougo/neco-vim'
Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }

call plug#end()

" }}}

" {{{ plugin configurations

autocmd BufEnter * call ncm2#enable_for_buffer()

" built-in syntax options
let g:load_doxygen_syntax = 1

let c_comment_strings = 1
let c_no_curly_error = 1
let c_syntax_for_h = 1

let cpp_no_cpp11 = 0
let cpp_no_cpp14 = 0

let g:tex_flavor = 'latex'
let g:tex_conceal = ''

" LanguageClient
let g:LanguageClient_serverCommands = {
  \ 'rust': ['rls'],
  \ 'cpp': ['clangd'],
  \ 'python': ['pyls'],
  \ 'go': ['gopls'],
  \ 'javascript': ['javascript-typescript-stdio'],
  \ 'typescript': ['javascript-typescript-stdio'],
  \ }

let g:LanguageClient_rootMarkers = {
  \ 'javascript': ['jsconfig.json'],
  \ 'typescript': ['tsconfig.json'],
  \ }

" rainbow parenthese
let g:rainbow_active = 1
let g:rainbow_conf = {
\    'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\    'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
\    'operators': '_,_',
\    'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\    'separately': {
\        '*': {},
\        'ocaml': {
\            'parentheses': ['start=/(\*\@!/ end=/)/ fold'],
\        },
\        'tex': {
\            'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\        },
\        'lisp': {
\            'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\        },
\        'vim': {
\            'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\        },
\        'html': {
\            'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\        },
\        'css': 0,
\        'cmake': 0,
\    }
\}
" vim-cmake-syntax incompatiblities
au FileType cmake RainbowToggleOff

" lightline.vim
let g:lightline = {
\ 'colorscheme': 'nord',
\ 'separator': { 'left': '', 'right': '' },
\ 'subseparator': { 'left': '', 'right': '' },
\ 'active': {
\   'left': [ ['mode', 'paste'],
\             ['gitbranch', 'readonly', 'filename'] ]
\ },
\}

" let g:indentLine_setConceal=0
let g:indentLine_concealcursor='nc'

let g:SuperTabDefaultCompletionType = '<C-n>'

autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()
" }}}

" {{{ options
colorscheme nord

set encoding=utf-8 ffs=unix,dos,mac

set background=dark

" disable neovim gui cursor
set guicursor=
autocmd OptionSet guicursor noautocmd set guicursor=

set guioptions+=M

" automatic filetype determination
filetype indent plugin on
" enable syntax highlight
syntax on

" list trailing whitespaces
set list listchars=tab:»·,trail:·
" remove trailing whitespaces on save
autocmd BufWritePre * %s/\s\+$//e

" clipboard on macos
if has('win32') || has('macunix')
  set clipboard=unnamed
else
  set clipboard=unnamedplus
endif

set lazyredraw

" faster scrolling
set ttyfast

set hidden

" disable backups
set nobackup nowb

" set undo histories
set undofile undodir=/tmp

set title

" Better line wrapping
set wrap linebreak
set formatoptions+=qrn1

" enable mouse support
set mouse=a

" Set to auto read when a file is changed from the outside
set autoread

" Display the cursor position
set ruler

" statusline plugins integration
set laststatus=2 noshowmode

" Disable belling
set noerrorbells novisualbell

" Removing scrollbars in gvim
if has("gui_running")
    set guitablabel=%-0.12t%M
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
    set guioptions+=a
    set guioptions-=m
else
    set t_Co=256 termguicolors
endif

" Better command-line completion
set wildmenu wildmode=longest,list,full
" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Show partial commands in the last line of the screen
set showcmd

" Set the command window height to 2 line
set cmdheight=2

" Highlight searches, incremental search
set hlsearch incsearch

" offsets of centering search result
set scrolloff=7

" Regex magic
set magic

" Show matching brackets when cursor over
set showmatch mat=2

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" enable line number
set number norelativenumber

" auto toggle relative number
" augroup numbertoggle
"   autocmd!
"   autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
"   autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
" augroup end

" margin left
set foldcolumn=1

set signcolumn=yes

" conceal modes

" when opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. useful for readmes, etc.
set autoindent smartindent

" allow text fold
set fdm=syntax nofoldenable

" stop certain movements from always going to the first character of a line.
" while this behaviour deviates from that of vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" can navigate past the end
set virtualedit=onemore

" New split window mode
set splitright splitbelow

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" set to first line when editing git commit
autocmd FileType gitcommit autocmd! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" tab options: tab to space, ident 4
set expandtab smarttab tabstop=4 softtabstop=4 shiftwidth=4

" move to next/previous lines automatically
set whichwrap+=<,>,h,l,[,]

" set vim's working directory to current file
autocmd BufEnter * if expand("%:p:h") !~ '^/tmp' | silent! lcd %:p:h | endif

" quickfix window auto adjust
au FileType qf call AdjustWindowHeight(3, 10)
" set quickfix window to bottom
autocmd FileType qf wincmd J
" close quickfix when leaving file
au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif

" start vim in insert mode
"autocmd BufRead,BufNewFile * startinsert

set completeopt=noinsert,menuone,noselect

set shortmess=asIc
" }}}

" {{{ key mappings
let mapleader=' '

nnoremap ; :
vnoremap ; :
" change Esc to Ctrl-C
" mapping over <Esc> can cause an issue in terminal vim where arrow keys will
" print letters A through D along with a newline rather than moving.
map <C-c> <Esc>

" refresh syntax highlight
nnoremap <silent> <Leader>sr :syntax off<CR>:syntax on<CR>

" close buffer
nnoremap <silent> <Leader>q :bd<CR>
nnoremap <silent> <Leader>Q :bd!<CR>
nnoremap <silent> <Leader>wq :w<Bar>bd<CR>

" buffer switching
noremap <silent> <Leader>bh :bprevious<CR>
noremap <silent> <Leader>bl :bnext<CR>

" tab switching
nnoremap <silent> th :tabprevious<CR>
nnoremap <silent> tl :tabnext<CR>

function! s:completionSelect()
    if pumvisible()
        if !empty(v:completed_item)
            return "\<C-y>\<C-e>"
        else
            return "\<C-e>\<CR>"
        endif
    else
        return "\<CR>"
    endif
endfunction

" <Ctrl-C> == quit completion
inoremap <expr> <C-c> pumvisible() ? "\<C-e>" : "\<Esc>"
" <CR> close popup, confirm selection
inoremap <silent><expr> <CR> <SID>completionSelect()

inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <silent><expr> <Up> pumvisible() && !empty(v:completed_item) ? "\<C-p>" : "\<C-o>gk"
inoremap <silent><expr> <Down> pumvisible() && !empty(v:completed_item) ? "\<C-n>" : "\<C-o>gj"

" insert new line in normal mode
nmap <silent> , i<CR><Esc>

" Ctrl+A == select all
nmap <silent> <C-a> gg^vG$

" Ctrl+Shift+Up == move line/selection up
imap <silent> <C-S-Up> <Esc>:m .-2<CR>==gi
nmap <silent> <C-S-Up> :m .-2<CR>==
vmap <silent> <C-S-Up> :m '<-2<CR>gv=gv

" Ctrl+Shift+Down == move line/selection down
imap <silent> <C-S-Down> <Esc>:m .+1<CR>==gi
nmap <silent> <C-S-Down> :m .+1<CR>==
vmap <silent> <C-S-Down> :m '>+1<CR>gv=gv

" Ctrl+Direction == switch to split in direction
nmap <silent> <C-Up> <C-W>k
nmap <silent> <C-Down> <C-W>j
nmap <silent> <C-Left> <C-W>h
nmap <silent> <C-Right> <C-W>l

" Ctrl-R == redo
inoremap <silent> <C-r> <C-o><C-r>

" Ctrl+T == newtab
nnoremap <silent> <C-t> :tabe<CR>

" Ctrl+F == clear search result highlight
noremap <silent> <C-f> <Esc>:noh<CR>

" Ctrl+D == toggle comment
imap <silent> <C-d> <C-o>gc$
nmap <silent> <C-d> ^gc$
vmap <silent> <C-d> gc

" EasyAlign
vmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Ctrl+Backspace == delete to previous word
inoremap <silent> <C-Backspace> <C-o>db

" Ctrl+Del == delete to next word
inoremap <silent> G<C-Del> <C-o>de

" }}}

" vim:foldmethod=marker
